// Events page with summary cards, data table, and management dialogs
import { useState, useMemo } from "react";
import { Plus, MoreHorizontal } from "lucide-react";
import { useLocation } from "wouter";
import { Header } from "@/components/header";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { useEvents, useEventsSummary } from "@/features/events/hooks/use-events";
import { AddEventDialog } from "@/features/events/components/add-event/add-event-dialog";
import { EditEventDialog } from "@/features/events/components/edit-event/edit-event-dialog";
import { DeleteEventDialog } from "@/features/events/components/delete-event/delete-event-dialog";
import { formatEventDateRange } from "@/features/events/utils/date-helpers";
import { statusConfig, Event } from "@/features/events/types/event-types";

export function EventsPage() {
  const [addEventOpen, setAddEventOpen] = useState(false);
  const [editEventOpen, setEditEventOpen] = useState(false);
  const [deleteEventOpen, setDeleteEventOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  const [timeFilter, setTimeFilter] = useState("last-30-days");
  const [, setLocation] = useLocation();

  const { data: events, isLoading: eventsLoading } = useEvents();
  const { data: summary, isLoading: summaryLoading } = useEventsSummary();
  const loading = eventsLoading || summaryLoading;

  const summaryCards = useMemo(
    () => [
      { title: "Total Events", value: summary?.totalEvents ?? 0 },
  { title: "Total Buying Desk", value: summary?.totalBuyOffers ?? 0 },
      { title: "Total Sold", value: summary?.totalSold ?? 0 },
      {
        title: "Total Revenue",
        value: `$${(summary?.totalRevenue ?? 0).toLocaleString()}`,
      },
      {
        title: "Total Profit",
        value: `$${(summary?.totalProfit ?? 0).toLocaleString()}`,
        subtitle:
          summary?.totalRevenue
            ? `${Math.round(
                ((summary.totalProfit ?? 0) / (summary.totalRevenue || 1)) * 100
              )}%`
            : undefined,
      },
    ],
    [summary]
  );

  const handleEditEvent = (event: Event) => {
    setSelectedEvent(event);
    setEditEventOpen(true);
  };
  const handleDeleteEvent = (event: Event) => {
    setSelectedEvent(event);
    setDeleteEventOpen(true);
  };
  const handleRowClick = (eventId: string) => {
    setLocation(`/events/${eventId}`);
  };

  return (
    <div className="min-h-screen bg-background text-foreground">
      <Header />
      <main className="pt-16">
        {/* Match other pages: mx-auto max-w-7xl px-4 pt-4 space-y-6 */}
        <div className="mx-auto max-w-7xl px-4 pt-4 space-y-6">
          {/* Header: mobile-first grid so the + stays top-right, picker below */}
          <div className="grid grid-cols-2 gap-2 sm:flex sm:items-center sm:justify-between mb-2">
            {/* Title (top-left) */}
            <h1 className="col-span-1 text-2xl font-heading font-semibold">Events</h1>

            {/* Add button (top-right). Icon-only on mobile, full button on sm+. */}
            <div className="col-span-1 justify-self-end">
              <Button
                size="icon"
                className="sm:hidden"
                aria-label="Add Show"
                onClick={() => setAddEventOpen(true)}
              >
                <Plus className="h-4 w-4" />
              </Button>
              <Button
                className="hidden sm:inline-flex"
                onClick={() => setAddEventOpen(true)}
              >
                <Plus className="h-4 w-4 mr-2" />
                Add Show
              </Button>
            </div>

            {/* Time filter: full-width row on mobile, inline on sm+ */}
            <div className="col-span-2 sm:col-auto sm:order-none">
              {loading ? (
                <div className="h-9 w-full sm:w-40 rounded bg-muted animate-pulse" />
              ) : (
                <Select value={timeFilter} onValueChange={setTimeFilter}>
                  <SelectTrigger className="h-9 w-full sm:w-40 text-sm">
                    <SelectValue placeholder="Last 30 Days" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="last-30-days">Last 30 Days</SelectItem>
                    <SelectItem value="last-90-days">Last 90 Days</SelectItem>
                    <SelectItem value="this-year">This Year</SelectItem>
                    <SelectItem value="all-time">All Time</SelectItem>
                  </SelectContent>
                </Select>
              )}
            </div>
          </div>

          {/* Summary Cards: responsive grid (1 / 2 / 5) */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
            {summaryCards.map((card) => (
              <Card key={card.title}>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium text-muted-foreground">
                    {card.title}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {loading ? (
                    <>
                      <div className="h-8 bg-muted rounded animate-pulse" />
                      <div className="h-3 w-12 mt-2 bg-muted rounded animate-pulse" />
                    </>
                  ) : (
                    <>
                      <div className="text-2xl font-bold">{card.value}</div>
                      {card.subtitle && (
                        <p className="text-xs text-muted-foreground mt-1">
                          {card.subtitle}
                        </p>
                      )}
                    </>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Events Table / Skeleton */}
          {loading ? (
            <div className="border rounded-lg">
              <div className="h-96 bg-muted rounded animate-pulse" />
            </div>
          ) : (
            <div className="border rounded-lg">
              <div className="overflow-x-auto">
                <table className="w-full text-xs sm:text-sm">
                  <thead>
                    <tr className="border-b bg-muted/50">
                      <th className="text-left p-3 sm:p-4 font-medium">Events</th>
                      <th className="text-left p-3 sm:p-4 font-medium">Date</th>
                      <th className="text-left p-3 sm:p-4 font-medium hidden md:table-cell">
                        Location
                      </th>
                      <th className="text-left p-3 sm:p-4 font-medium">Status</th>
                      <th className="text-left p-3 sm:p-4 font-medium hidden md:table-cell">
                        Buying Desk
                      </th>
                      <th className="text-left p-3 sm:p-4 font-medium hidden md:table-cell">
                        Sold
                      </th>
                      <th className="text-left p-3 sm:p-4 font-medium hidden lg:table-cell">
                        Revenue
                      </th>
                      <th className="text-left p-3 sm:p-4 font-medium hidden lg:table-cell">
                        Profit
                      </th>
                      <th className="w-10 p-3 sm:p-4"></th>
                    </tr>
                  </thead>
                  <tbody>
                    {events?.map((event) => (
                      <tr
                        key={event.id}
                        className="border-b hover:bg-muted/25 cursor-pointer"
                        onClick={() => handleRowClick(event.id)}
                      >
                        <td className="p-3 sm:p-4">
                          <div className="flex items-center gap-3">
                            <div className="h-8 w-8 sm:h-10 sm:w-10 rounded-lg bg-primary/10 flex items-center justify-center">
                              <span className="text-[10px] sm:text-xs font-medium">
                                {event.name.charAt(0).toUpperCase()}
                              </span>
                            </div>
                            <div>
                              <div className="font-medium">{event.name}</div>
                              {/* Compact inline meta on mobile */}
                              <div className="mt-0.5 text-[10px] text-muted-foreground md:hidden">
                                {formatEventDateRange(event.dateStart, event.dateEnd)}
                                {event.location ? ` • ${event.location}` : ""}
                              </div>
                              {event.status === "active" && (
                                <div className="flex items-center gap-1 mt-1">
                                  <div className="h-2 w-2 bg-green-500 rounded-full animate-pulse" />
                                  <span className="text-[10px] sm:text-xs text-green-600">
                                    Live Now
                                  </span>
                                </div>
                              )}
                            </div>
                          </div>
                        </td>
                        <td className="p-3 sm:p-4 text-xs sm:text-sm">
                          {formatEventDateRange(event.dateStart, event.dateEnd)}
                        </td>
                        <td className="p-3 sm:p-4 text-xs sm:text-sm text-muted-foreground hidden md:table-cell">
                          {event.location || "—"}
                        </td>
                        <td className="p-3 sm:p-4">
                          <Badge
                            variant={
                              statusConfig[
                                event.status as keyof typeof statusConfig
                              ].variant
                            }
                          >
                            {
                              statusConfig[
                                event.status as keyof typeof statusConfig
                              ].label
                            }
                          </Badge>
                        </td>
                        <td className="p-3 sm:p-4 text-xs sm:text-sm hidden md:table-cell">
                          0
                        </td>
                        <td className="p-3 sm:p-4 text-xs sm:text-sm hidden md:table-cell">
                          0
                        </td>
                        <td className="p-3 sm:p-4 text-xs sm:text-sm hidden lg:table-cell">
                          $0
                        </td>
                        <td className="p-3 sm:p-4 text-xs sm:text-sm hidden lg:table-cell">
                          <span>$0</span>
                          <span className="text-muted-foreground ml-1">(0%)</span>
                        </td>
                        <td
                          className="p-3 sm:p-4"
                          onClick={(e) => {
                            e.stopPropagation();
                          }}
                        >
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="icon" className="h-8 w-8">
                                <MoreHorizontal className="h-4 w-4" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuItem
                                onClick={() => setLocation(`/events/${event.id}`)}
                              >
                                View Details
                              </DropdownMenuItem>
                              <DropdownMenuItem
                                onClick={() => handleEditEvent(event)}
                              >
                                Edit Event
                              </DropdownMenuItem>
                              <DropdownMenuItem
                                onClick={() => handleDeleteEvent(event)}
                                className="text-destructive"
                              >
                                Delete Event
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </td>
                      </tr>
                    ))}
                    {(!events || events.length === 0) && (
                      <tr>
                        <td
                          colSpan={9}
                          className="p-8 text-center text-muted-foreground"
                        >
                          <div className="flex flex-col items-center gap-2">
                            <div className="h-12 w-12 rounded-full bg-muted flex items-center justify-center">
                              <Plus className="h-6 w-6" />
                            </div>
                            <p>No events yet</p>
                            <p className="text-sm">
                              Add your first card show to start tracking performance
                            </p>
                          </div>
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {/* Dialogs */}
          <AddEventDialog open={addEventOpen} onOpenChange={setAddEventOpen} />
          <EditEventDialog
            open={editEventOpen}
            onOpenChange={setEditEventOpen}
            event={selectedEvent}
          />
          <DeleteEventDialog
            open={deleteEventOpen}
            onOpenChange={setDeleteEventOpen}
            event={selectedEvent}
          />
        </div>
      </main>
    </div>
  );
}
